{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "pythonjvsc74a57bd0858b3b61cb144fdc5cb7bf4b9243f63927d0f0838c379c9a756049bf10e1a861",
   "display_name": "Python 3.8.2  ('venv': venv)"
  },
  "metadata": {
   "interpreter": {
    "hash": "858b3b61cb144fdc5cb7bf4b9243f63927d0f0838c379c9a756049bf10e1a861"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "source": [
    "## What is a Win Probability Model?\n",
    "\n",
    "In our tutorial here a win probability model is a model that predicts which team will win the game at each minute (or whatever other increment you choose) throughout a game. You may have seen graphs that look like this as the output of one of these models.\n",
    "\n",
    "![](fig1.png)\n",
    "\n",
    "This exact example is taken from [Mike Beuoy's](https://twitter.com/inpredict) website [www.inpredictable.com](https://www.inpredictable.com/). He is more or less the main and best win probability guy in the game. If you don't follow Mike or read his excellent website, you should. What we're going to do is a very simple version of what you see on that site, and will produce a chart like the above as a final product. Let's get into it.\n",
    "\n",
    "## Data\n",
    "\n",
    "We're keeping it simple and just using play-by-play data to conduct our modeling. More effective models use pregame point spreads, team ratings, various and complex home court and travel adjustments, etc. We're going lukewarm tap water here and sticking to the basics.\n",
    "\n",
    "1) pbp.parquet - simply a somewhat pre-cleaned play by play file from the 2018-19 season, the last before COVID-19 impacts. We went with parquet because these pbp files are big, and parquet compresses them down a bit for easy read in and uploading. Sidenote, go get vaccinated if you can/are able so I can go see an NBA game in person next season. \n",
    "\n",
    "## Step 1: Format the data how we want it and decide what's going into the model\n",
    "\n",
    "One of the most important parts of this (or any) model is deciding what variables we think are important for predicting if a team wins a game given the current game situation. Since we want a probability as out outcome, we'll be using a binary classifier which returns a probability of win between 0-1. To build the model though, the two obvious ones are scoring margin and time remaining on the clock. Also, let's include the actual score as a three point margin in a 130-133 game is a little less meaningful than in a 75-78 game. This is also a proxy for pace if you think about it. Next we should also make sure to separate based on home and away. If it's good enough for Vegas, we need it. Also, let's try and add cumulative fouls in as well. Maybe identifying the bonus or too many players in foul trouble will help out model.\n",
    "\n",
    "We're just simply doing some cumulative sums across scoring to get out variables, and making sure that fouls are assigned to the proper team. Also flipping the game time because the guy who scraped this data (me) is a dumb dumb. \n",
    "\n",
    "When you're starting out, resist the urge as [Senthil Natarajan](https://twitter.com/SENTH1S) says to \"[dump] 25 features into a cauldron, [chant] 'XGBoost' three times and [wave] our magic wand\". We will be dumping fewer features into our models and using LightGBM (I'm a LightGBM fanboy mostly because it's the first GBDT I ever used). \n",
    "\n",
    "Quick note here. You'll see that I've done more or less everything for the data prep in method chaining. This is a) not the only way to do this b) not an endorsement of this being the best (or even optimal) way to do this. I think it helps with R <-> Python translation for newcomers to both languages as it mimics the feel of the tidyverse style syntax that I wrote in R first. Also I think it looks neat."
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "   time_remaining  home_score  away_score  home_margin  home_foul_totals  \\\n",
       "0          2860.0         0.0         0.0          0.0                 0   \n",
       "1          2860.0         0.0         0.0          0.0                 0   \n",
       "2          2835.0         0.0         0.0          0.0                 0   \n",
       "3          2833.0         0.0         0.0          0.0                 0   \n",
       "4          2828.0         0.0         0.0          0.0                 0   \n",
       "5          2823.0         0.0         0.0          0.0                 0   \n",
       "6          2818.0         0.0         0.0          0.0                 0   \n",
       "7          2815.0         0.0         2.0         -2.0                 0   \n",
       "8          2796.0         0.0         2.0         -2.0                 0   \n",
       "9          2795.0         0.0         2.0         -2.0                 0   \n",
       "\n",
       "   away_foul_totals  home_win  \n",
       "0                 0         1  \n",
       "1                 0         1  \n",
       "2                 0         1  \n",
       "3                 0         1  \n",
       "4                 0         1  \n",
       "5                 0         1  \n",
       "6                 0         1  \n",
       "7                 0         1  \n",
       "8                 0         1  \n",
       "9                 0         1  "
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>time_remaining</th>\n      <th>home_score</th>\n      <th>away_score</th>\n      <th>home_margin</th>\n      <th>home_foul_totals</th>\n      <th>away_foul_totals</th>\n      <th>home_win</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2860.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2860.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2835.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2833.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2828.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2823.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2818.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2815.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>-2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2796.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>-2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2795.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>-2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 83
    }
   ],
   "source": [
    "import pandas as pd\n",
    "pd.options.mode.chained_assignment = None  # default='warn'\n",
    "import numpy as np\n",
    "\n",
    "pbp = pd.read_parquet(\"data/pbp.parquet\")\n",
    "\n",
    "pbp = (pbp\n",
    "        .dropna(subset = ['nameTeam', 'eventGeneral'])\n",
    "        .fillna(0)\n",
    "        .assign(home_points_scored = lambda x: np.where(x.nameTeam == x.homeTeam, x.shotResultPoints, 0))\n",
    "        .assign(away_points_scored = lambda x: np.where(x.nameTeam == x.awayTeam, x.shotResultPoints, 0))\n",
    "        .assign(foul = lambda x: [\"foul\" in event for event in x.eventType])\n",
    "        .assign(home_foul = lambda x: np.where((x.nameTeam == x.homeTeam) & (x.foul == True), 1, 0))\n",
    "        .assign(away_foul = lambda x: np.where((x.nameTeam == x.awayTeam) & (x.foul == True), 1, 0))\n",
    "        .assign(time_remaining = lambda x: 2880 - x.gametime)\n",
    "        .assign(home_score = lambda x: x.groupby(['idGame'])['home_points_scored'].cumsum())\n",
    "        .assign(away_score = lambda x: x.groupby(['idGame'])['away_points_scored'].cumsum())\n",
    "        .assign(home_foul_totals = lambda x: x.groupby(['idGame'])['home_foul'].cumsum())\n",
    "        .assign(away_foul_totals = lambda x: x.groupby(['idGame'])['away_foul'].cumsum())\n",
    "        .assign(home_margin = lambda x: x.home_score - x.away_score)\n",
    "       )\n",
    "\n",
    "winner_frame = (pbp\n",
    "                .groupby('idGame')[['home_score', 'away_score']]\n",
    "                .max()\n",
    "                .reset_index()\n",
    "                .assign(home_win = lambda x: np.where(x.home_score > x.away_score, 1, 0))\n",
    "                .drop(['home_score', 'away_score'], axis=1))\n",
    "\n",
    "pbp = pbp.merge(winner_frame, how = \"left\", on = \"idGame\")\n",
    "pbp = pbp[[\"idGame\", \"time_remaining\", \"home_score\", \"away_score\", \"home_margin\", \n",
    "         \"home_foul_totals\", \"away_foul_totals\", \"home_win\"]]\n",
    "\n",
    "pbp.drop(['idGame'], axis=1).head(10)"
   ]
  },
  {
   "source": [
    "## Step 2: Let's model the thing\n",
    "\n",
    "So with our data setup the way we want, we need to do a quick review on how we're going to model this. The `home_win` column is our target variable, or what we're trying to predict. Everything else besides `idGame` is going to go into the model. Nice and easy. \n",
    "\n",
    "### Logistic Regression\n",
    "\n",
    "The first thing we're going to try is a [logistic regression](https://stats.idre.ucla.edu/r/dae/logit-regression/) that takes our input data and returns a probability of `home_win`. If you're new to Python or modeling in general, master this section before moving onto the next. I promise you it's worth your time. \n",
    "\n",
    "### Step 1: Split the data and build the model\n",
    "\n",
    "Our very first step is to split our data into training and testing. This should *not* be done randomly, but on the game level. We want all the games in train to only be in train and all the games in test to only be in test. Otherwise you get serious leakage issues. Note, we're removing `home_margin` from this model because otherwise it'll throw a warning and give us NA's due to the presence of `home_score` and `away_score` resulting in the same value."
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "games = np.unique(pbp[\"idGame\"]) ## get all the unique games (there are 500 of them)\n",
    "train_games = np.random.choice(games, size=400, replace=False)\n",
    "train = pbp.loc[pbp['idGame'].isin(train_games)]\n",
    "test = pbp.loc[~pbp['idGame'].isin(train_games)]"
   ]
  },
  {
   "source": [
    "Brief interlude. I'm going to use `statsmodels` here instead of `sklearn` for the logistic regression. I prefer `statsmodels` for \"traditional statistical models\", as there is a nice summary table like R's `summary(model)`. "
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Optimization terminated successfully.\n         Current function value: 0.491855\n         Iterations 6\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:               home_win   No. Observations:               160564\nModel:                          Logit   Df Residuals:                   160559\nMethod:                           MLE   Df Model:                            4\nDate:                Mon, 05 Apr 2021   Pseudo R-squ.:                  0.2741\nTime:                        15:09:11   Log-Likelihood:                -78974.\nconverged:                       True   LL-Null:                   -1.0880e+05\nCovariance Type:            nonrobust   LLR p-value:                     0.000\n====================================================================================\n                       coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------------\ntime_remaining       0.0001   4.04e-06     34.069      0.000       0.000       0.000\nhome_score           0.1560      0.001    170.310      0.000       0.154       0.158\naway_score          -0.1629      0.001   -175.268      0.000      -0.165      -0.161\nhome_foul_totals    -0.0031      0.002     -1.315      0.188      -0.008       0.002\naway_foul_totals     0.0533      0.002     22.434      0.000       0.049       0.058\n====================================================================================\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "\n",
    "features = ['time_remaining', 'home_score', 'away_score', 'home_foul_totals', 'away_foul_totals']\n",
    "target = ['home_win']\n",
    "\n",
    "X_train = train[features]\n",
    "y_train = train[target]\n",
    "X_test = test[features]\n",
    "y_test = test[target]\n",
    "\n",
    "model = sm.Logit(y_train, X_train).fit() ### THE y, x ORDER HERE IS DIFFERENT FROM SKLEARN SYNTAX\n",
    "print(model.summary())"
   ]
  },
  {
   "source": [
    "Those coefficients all look sensible and square with what we know about basketball. Now, let's see how our model does from a prediction standpoint.\n",
    "\n",
    "### Step 2: Evaluate the model\n",
    "\n",
    "We're going to use pure accuracy here where if Pr(home_win) > 0.5 and home_win == 1, then the prediction is correct. However, this is probably not the best metric and you should look into log-loss and/or Brier score as alternatives/supplements. "
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Training Accuracy %: 75.1\nTesting Accuracy %: 75.2\nThe chance of a home team winning a game at tip is 59.7 %\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "train_predictions = model.predict(X_train)\n",
    "train_predictions_01 = 1 * (train_predictions > 0.50)\n",
    "\n",
    "test_predictions = model.predict(X_test)\n",
    "test_predictions_01 = 1 * (test_predictions > 0.50)\n",
    "\n",
    "print(f\"Training Accuracy %: {round(100 * accuracy_score(y_train, train_predictions_01), 1)}\")\n",
    "print(f\"Testing Accuracy %: {round(100 * accuracy_score(y_test, test_predictions_01), 1)}\")\n",
    "print(f\"The chance of a home team winning a game at tip is {round(100 * train_predictions[0], 1)} %\")\n"
   ]
  },
  {
   "source": [
    "Not bad! We'll leave that model alone for now and move along. However, something important to note is that if we look at the first prediction of any game, we can determine what the home court advantage is. If it's greater than 50% (which ours is at ~60 percent), that's the home team, and less than 50% it's the away team. Keep in mind that's only possible because there is no team-specific information contained in this model.\n",
    "\n",
    "### LightGBM\n",
    "\n",
    "Now let's learn some machines using [LightGBM](https://lightgbm.readthedocs.io/en/latest/index.html), one of the gold standard gradient boosting tree libraries. We're going to broadly speaking repeat the same process as before. We split our data into train and test, and then  build our model and evaluate it. There's quite a bit more code here since the process for LightGBM is a bit more complex. Keep in mind that this is not an endorsement that LightGBM is automatically better than logistic regression. It's far easier to make a garbage model with machine learning if you're not careful. The upside is that we can probably get some more predictive power, although our intentionally simplified feature space will likely put a damper on that.\n",
    "\n",
    "### Step 1: Split the data and decide on cross validation\n",
    "\n",
    "We split the data more or less the same as we did with out previous model, just a few formatting steps to get the datasets into the proper type for LightGBM. Since we're going to be CV'ing our model, we need to decide carefully how to do that. Just as when we made sure that all games in train and test are distinct, we need to do that as well for our CV folds. No game should be trained on and the tested on in the CV or the overall evaluation. We use `sklearn.model_selection.GroupKFold()` to create indices on the game level. If this doesn't quite make sense, take some time and line by line it. The vast majority of the work for machine learning (non-deep learning edition) is properly setting up validation and evaluation methods, not coding the actual models."
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "from lightgbm import LGBMClassifier\n",
    "from sklearn.model_selection import RandomizedSearchCV, GroupKFold, train_test_split\n",
    "import scipy as sp\n",
    "\n",
    "X_train = train[features]\n",
    "y_train = train[target].to_numpy().flatten() ## removes column vector shape\n",
    "group_train = train['idGame']\n",
    "\n",
    "X_train, X_val, y_train, y_val, group_train, group_val = train_test_split(X_train, y_train, group_train, test_size = 0.10, random_state = 2020)\n",
    "\n",
    "X_test = test[features]\n",
    "y_test = test[target].to_numpy().flatten()\n",
    "\n",
    "group_kfold = GroupKFold(n_splits = 5).split(X_train, y_train, group_train)    \n"
   ]
  },
  {
   "source": [
    "### Step 2: Tuning\n",
    "\n",
    "With the splits and groups defined, we move onto the tuning of the hyperparameters of the model. Hyperparameters essentially control how the model learns. LightGBM comes with solid default values, but let's give a quick tune anyway. Our first step is to define the grid of values which we want to use. This grid has some non-extreme values given that we have a model that is pretty small in terms of predictors. `sklearn.model_selection.RandomSearchCV()` takes care of the tuning and cross validation across a random walk of the parameters. It's a pretty good way to do it, although there are more complex parameter search methods available such as Optuna and Ray Tune."
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgb = LGBMClassifier(random_state = 2020, n_estimators = 1000)\n",
    "\n",
    "param_grid = { \n",
    "    'max_depth': [3, 5, 7, 10],\n",
    "    'min_child_weight': [0.01, 0.05, 1, 10, 20, 100],\n",
    "    'learning_rate': list(np.logspace(np.log10(0.005), np.log10(0.5), base=10, num=10)),\n",
    "    'subsample': [0.2, 0.4, 0.6, 0.8], \n",
    "    'colsample_bytree': [0.4, 0.5, 0.6]\n",
    "    }\n",
    "\n",
    "fit_params = {\n",
    "    \"early_stopping_rounds\": 5, \n",
    "    \"eval_set\": [(X_val, y_val)],\n",
    "    'eval_names': ['Validation Set'],\n",
    "    'eval_metric': ['binary'],\n",
    "    'verbose': 100,\n",
    "    'groups': group_train\n",
    "    }\n",
    "\n",
    "rand_search = RandomizedSearchCV(\n",
    "    estimator = lgb, \n",
    "    param_distributions = param_grid, \n",
    "    n_iter = 10,\n",
    "    cv = group_kfold,         \n",
    "    random_state = 2020,\n",
    "    n_jobs = 8) ## adjust this for y"
   ]
  },
  {
   "source": [
    "### Step 3: The actual tuning/modeling"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Training until validation scores don't improve for 5 rounds\n",
      "[100]\tValidation Set's binary_logloss: 0.567388\n",
      "[200]\tValidation Set's binary_logloss: 0.528313\n",
      "[300]\tValidation Set's binary_logloss: 0.505711\n",
      "[400]\tValidation Set's binary_logloss: 0.490945\n",
      "[500]\tValidation Set's binary_logloss: 0.481046\n",
      "[600]\tValidation Set's binary_logloss: 0.474172\n",
      "[700]\tValidation Set's binary_logloss: 0.468371\n",
      "[800]\tValidation Set's binary_logloss: 0.464571\n",
      "[900]\tValidation Set's binary_logloss: 0.461638\n",
      "[1000]\tValidation Set's binary_logloss: 0.459296\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[1000]\tValidation Set's binary_logloss: 0.459296\n"
     ]
    }
   ],
   "source": [
    "rand_search.fit(X_train, y_train, **fit_params)    \n",
    "best_model = rand_search.best_estimator_"
   ]
  },
  {
   "source": [
    "\n",
    "### Step 4: Evaluate\n",
    "\n",
    "With the tuned best model (`best_model`), we now can predict on our training and test data to see how we did."
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Training Accuracy %: 77.1\nTesting Accuracy %: 74.0\n"
     ]
    }
   ],
   "source": [
    "train_predictions_01 = best_model.predict(X_train)\n",
    "test_predictions_01 = best_model.predict(X_test)\n",
    "test_predictions = best_model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "print(f\"Training Accuracy %: {round(100 * accuracy_score(y_train, train_predictions_01), 1)}\")\n",
    "print(f\"Testing Accuracy %: {round(100 * accuracy_score(y_test, test_predictions_01), 1)}\")"
   ]
  },
  {
   "source": [
    "Tiny overfit perhaps?\n",
    "\n",
    "### Step 5: Make a janky chart\n",
    "\n",
    "If it's not obvious, my charting skills in python are several ordes of magnitude worse than my R charting skills. If this is crap code, please let me know."
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/svg+xml": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg height=\"277.314375pt\" version=\"1.1\" viewBox=\"0 0 385.78125 277.314375\" width=\"385.78125pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n <metadata>\n  <rdf:RDF xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n   <cc:Work>\n    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n    <dc:date>2021-04-05T15:16:57.365237</dc:date>\n    <dc:format>image/svg+xml</dc:format>\n    <dc:creator>\n     <cc:Agent>\n      <dc:title>Matplotlib v3.4.1, https://matplotlib.org/</dc:title>\n     </cc:Agent>\n    </dc:creator>\n   </cc:Work>\n  </rdf:RDF>\n </metadata>\n <defs>\n  <style type=\"text/css\">*{stroke-linecap:butt;stroke-linejoin:round;}</style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M 0 277.314375 \nL 385.78125 277.314375 \nL 385.78125 0 \nL 0 0 \nz\n\" style=\"fill:none;\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 43.78125 239.758125 \nL 378.58125 239.758125 \nL 378.58125 22.318125 \nL 43.78125 22.318125 \nz\n\" style=\"fill:#ffffff;\"/>\n   </g>\n   <g id=\"PolyCollection_1\">\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 353.132358 22.836273 \nL 353.132358 22.836273 \nL 353.132358 22.836273 \nL 353.132358 22.836273 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 349.508981 22.854714 \nL 349.508981 22.854714 \nL 349.508981 22.854714 \nL 349.508981 22.854714 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 348.549852 22.579775 \nL 348.549852 22.696534 \nL 348.549852 22.579775 \nL 348.549852 22.579775 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 343.114787 22.637618 \nL 343.114787 22.637618 \nL 343.114787 22.637618 \nL 343.114787 22.637618 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 338.958561 22.957331 \nL 338.958561 22.957331 \nL 338.958561 22.957331 \nL 338.958561 22.957331 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 334.376055 23.046469 \nL 334.376055 23.394885 \nL 334.376055 23.046469 \nL 334.376055 23.046469 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 326.916162 23.785064 \nL 326.916162 24.512815 \nL 326.916162 23.785064 \nL 326.916162 23.785064 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 322.866506 23.747871 \nL 322.866506 23.747871 \nL 322.866506 23.747871 \nL 322.866506 23.747871 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 321.054818 23.537624 \nL 321.054818 23.769381 \nL 321.054818 23.537624 \nL 321.054818 23.537624 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 309.012419 23.992115 \nL 309.012419 23.992115 \nL 309.012419 23.992115 \nL 309.012419 23.992115 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 299.740837 25.025773 \nL 299.740837 26.084506 \nL 299.740837 25.025773 \nL 299.740837 25.025773 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 293.772923 27.600242 \nL 293.772923 28.824844 \nL 293.772923 27.600242 \nL 293.772923 27.600242 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 290.895536 29.31181 \nL 290.895536 29.31181 \nL 289.403557 29.31181 \nL 288.018148 29.312791 \nL 288.018148 29.312791 \nL 288.018148 29.312791 \nL 289.403557 28.329705 \nL 290.895536 29.31181 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 283.222503 30.409353 \nL 283.222503 31.304243 \nL 283.115933 33.097526 \nL 283.115933 31.700808 \nL 283.115933 31.700808 \nL 283.222503 30.409353 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 280.345116 31.814917 \nL 280.345116 34.942784 \nL 280.345116 31.814917 \nL 280.345116 31.814917 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 275.016621 28.322978 \nL 275.016621 28.322978 \nL 275.016621 28.322978 \nL 275.016621 28.322978 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 271.606384 28.996011 \nL 271.606384 28.996011 \nL 271.606384 28.996011 \nL 271.606384 28.996011 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 271.180104 33.387704 \nL 271.180104 33.387704 \nL 271.180104 33.387704 \nL 271.180104 33.387704 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 267.130448 31.756604 \nL 267.130448 35.856649 \nL 267.130448 31.756604 \nL 267.130448 31.756604 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 250.292404 30.718765 \nL 250.292404 30.718765 \nL 250.292404 30.718765 \nL 250.292404 30.718765 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 246.242747 30.471082 \nL 246.242747 30.471082 \nL 246.242747 30.471082 \nL 246.242747 30.471082 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 239.955123 29.572798 \nL 239.955123 29.572798 \nL 239.955123 29.572798 \nL 239.955123 29.572798 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 233.987209 28.629498 \nL 233.987209 30.918833 \nL 233.987209 28.629498 \nL 233.987209 28.629498 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 232.068951 28.629498 \nL 232.068951 32.278805 \nL 232.068951 28.629498 \nL 232.068951 28.629498 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 225.355047 33.77944 \nL 225.355047 33.77944 \nL 225.355047 33.77944 \nL 225.355047 33.77944 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 220.879111 30.032234 \nL 220.879111 30.940506 \nL 220.879111 30.032234 \nL 220.879111 30.032234 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 211.28782 32.654956 \nL 211.28782 32.654956 \nL 211.28782 32.654956 \nL 211.28782 32.654956 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 208.197293 32.19 \nL 208.197293 34.181224 \nL 208.197293 32.19 \nL 208.197293 32.19 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 203.934497 36.241512 \nL 203.934497 39.057425 \nL 202.016239 41.802661 \nL 202.016239 41.262025 \nL 202.016239 41.262025 \nL 203.934497 36.241512 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 199.245421 38.983339 \nL 199.245421 41.897736 \nL 199.245421 38.983339 \nL 199.245421 38.983339 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 197.327163 42.269634 \nL 197.327163 43.002162 \nL 197.327163 42.269634 \nL 197.327163 42.269634 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 183.259936 62.722025 \nL 183.259936 65.985489 \nL 183.259936 62.722025 \nL 183.259936 62.722025 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 174.414634 49.631169 \nL 174.414634 49.631169 \nL 174.414634 49.631169 \nL 174.414634 49.631169 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 166.102182 41.733387 \nL 166.102182 45.81704 \nL 166.102182 41.733387 \nL 166.102182 41.733387 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 156.937171 60.740395 \nL 156.937171 62.627604 \nL 156.937171 60.740395 \nL 156.937171 60.740395 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 146.173611 69.557395 \nL 146.173611 80.609193 \nL 146.173611 69.557395 \nL 146.173611 69.557395 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 135.83633 85.880897 \nL 135.83633 88.202952 \nL 135.83633 85.880897 \nL 135.83633 85.880897 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 134.557491 88.202952 \nL 134.557491 88.202952 \nL 134.344352 103.524944 \nL 134.344352 91.642585 \nL 134.344352 91.642585 \nL 134.557491 88.202952 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 129.228996 102.834772 \nL 129.228996 108.116865 \nL 129.228996 102.834772 \nL 129.228996 102.834772 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 123.580792 93.223988 \nL 123.580792 97.654826 \nL 123.580792 93.223988 \nL 123.580792 93.223988 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 121.342824 87.635513 \nL 121.342824 91.151884 \nL 121.342824 87.635513 \nL 121.342824 87.635513 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 116.440608 88.592169 \nL 116.440608 99.754618 \nL 116.440608 88.592169 \nL 116.440608 88.592169 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 109.620135 84.372716 \nL 109.620135 84.372716 \nL 109.620135 84.372716 \nL 109.620135 84.372716 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 79.354283 121.271991 \nL 79.354283 121.271991 \nL 79.354283 121.271991 \nL 79.354283 121.271991 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 75.091487 103.78031 \nL 75.091487 103.78031 \nL 75.091487 103.78031 \nL 75.091487 103.78031 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 71.041831 87.02124 \nL 71.041831 98.060846 \nL 69.656422 83.814803 \nL 69.656422 68.940469 \nL 69.656422 68.940469 \nL 71.041831 87.02124 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 68.164443 76.516816 \nL 68.164443 114.384242 \nL 68.164443 76.516816 \nL 68.164443 76.516816 \nz\n\" style=\"fill:#1f77b4;fill-opacity:0.2;stroke:#1f77b4;stroke-opacity:0.2;\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <defs>\n       <path d=\"M 0 0 \nL 0 3.5 \n\" id=\"m47deb5a1d2\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.827163\" xlink:href=\"#m47deb5a1d2\" y=\"239.758125\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 48 -->\n      <g transform=\"translate(51.464663 254.356562)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 2419 4116 \nL 825 1625 \nL 2419 1625 \nL 2419 4116 \nz\nM 2253 4666 \nL 3047 4666 \nL 3047 1625 \nL 3713 1625 \nL 3713 1100 \nL 3047 1100 \nL 3047 0 \nL 2419 0 \nL 2419 1100 \nL 313 1100 \nL 313 1709 \nL 2253 4666 \nz\n\" id=\"DejaVuSans-34\" transform=\"scale(0.015625)\"/>\n        <path d=\"M 2034 2216 \nQ 1584 2216 1326 1975 \nQ 1069 1734 1069 1313 \nQ 1069 891 1326 650 \nQ 1584 409 2034 409 \nQ 2484 409 2743 651 \nQ 3003 894 3003 1313 \nQ 3003 1734 2745 1975 \nQ 2488 2216 2034 2216 \nz\nM 1403 2484 \nQ 997 2584 770 2862 \nQ 544 3141 544 3541 \nQ 544 4100 942 4425 \nQ 1341 4750 2034 4750 \nQ 2731 4750 3128 4425 \nQ 3525 4100 3525 3541 \nQ 3525 3141 3298 2862 \nQ 3072 2584 2669 2484 \nQ 3125 2378 3379 2068 \nQ 3634 1759 3634 1313 \nQ 3634 634 3220 271 \nQ 2806 -91 2034 -91 \nQ 1263 -91 848 271 \nQ 434 634 434 1313 \nQ 434 1759 690 2068 \nQ 947 2378 1403 2484 \nz\nM 1172 3481 \nQ 1172 3119 1398 2916 \nQ 1625 2713 2034 2713 \nQ 2441 2713 2670 2916 \nQ 2900 3119 2900 3481 \nQ 2900 3844 2670 4047 \nQ 2441 4250 2034 4250 \nQ 1625 4250 1398 4047 \nQ 1172 3844 1172 3481 \nz\n\" id=\"DejaVuSans-38\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-34\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-38\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_2\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"96.192327\" xlink:href=\"#m47deb5a1d2\" y=\"239.758125\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 42 -->\n      <g transform=\"translate(89.829827 254.356562)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 1228 531 \nL 3431 531 \nL 3431 0 \nL 469 0 \nL 469 531 \nQ 828 903 1448 1529 \nQ 2069 2156 2228 2338 \nQ 2531 2678 2651 2914 \nQ 2772 3150 2772 3378 \nQ 2772 3750 2511 3984 \nQ 2250 4219 1831 4219 \nQ 1534 4219 1204 4116 \nQ 875 4013 500 3803 \nL 500 4441 \nQ 881 4594 1212 4672 \nQ 1544 4750 1819 4750 \nQ 2544 4750 2975 4387 \nQ 3406 4025 3406 3419 \nQ 3406 3131 3298 2873 \nQ 3191 2616 2906 2266 \nQ 2828 2175 2409 1742 \nQ 1991 1309 1228 531 \nz\n\" id=\"DejaVuSans-32\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-34\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-32\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_3\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"134.557491\" xlink:href=\"#m47deb5a1d2\" y=\"239.758125\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 36 -->\n      <g transform=\"translate(128.194991 254.356562)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 2597 2516 \nQ 3050 2419 3304 2112 \nQ 3559 1806 3559 1356 \nQ 3559 666 3084 287 \nQ 2609 -91 1734 -91 \nQ 1441 -91 1130 -33 \nQ 819 25 488 141 \nL 488 750 \nQ 750 597 1062 519 \nQ 1375 441 1716 441 \nQ 2309 441 2620 675 \nQ 2931 909 2931 1356 \nQ 2931 1769 2642 2001 \nQ 2353 2234 1838 2234 \nL 1294 2234 \nL 1294 2753 \nL 1863 2753 \nQ 2328 2753 2575 2939 \nQ 2822 3125 2822 3475 \nQ 2822 3834 2567 4026 \nQ 2313 4219 1838 4219 \nQ 1578 4219 1281 4162 \nQ 984 4106 628 3988 \nL 628 4550 \nQ 988 4650 1302 4700 \nQ 1616 4750 1894 4750 \nQ 2613 4750 3031 4423 \nQ 3450 4097 3450 3541 \nQ 3450 3153 3228 2886 \nQ 3006 2619 2597 2516 \nz\n\" id=\"DejaVuSans-33\" transform=\"scale(0.015625)\"/>\n        <path d=\"M 2113 2584 \nQ 1688 2584 1439 2293 \nQ 1191 2003 1191 1497 \nQ 1191 994 1439 701 \nQ 1688 409 2113 409 \nQ 2538 409 2786 701 \nQ 3034 994 3034 1497 \nQ 3034 2003 2786 2293 \nQ 2538 2584 2113 2584 \nz\nM 3366 4563 \nL 3366 3988 \nQ 3128 4100 2886 4159 \nQ 2644 4219 2406 4219 \nQ 1781 4219 1451 3797 \nQ 1122 3375 1075 2522 \nQ 1259 2794 1537 2939 \nQ 1816 3084 2150 3084 \nQ 2853 3084 3261 2657 \nQ 3669 2231 3669 1497 \nQ 3669 778 3244 343 \nQ 2819 -91 2113 -91 \nQ 1303 -91 875 529 \nQ 447 1150 447 2328 \nQ 447 3434 972 4092 \nQ 1497 4750 2381 4750 \nQ 2619 4750 2861 4703 \nQ 3103 4656 3366 4563 \nz\n\" id=\"DejaVuSans-36\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-33\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-36\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_4\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"172.922656\" xlink:href=\"#m47deb5a1d2\" y=\"239.758125\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 30 -->\n      <g transform=\"translate(166.560156 254.356562)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 2034 4250 \nQ 1547 4250 1301 3770 \nQ 1056 3291 1056 2328 \nQ 1056 1369 1301 889 \nQ 1547 409 2034 409 \nQ 2525 409 2770 889 \nQ 3016 1369 3016 2328 \nQ 3016 3291 2770 3770 \nQ 2525 4250 2034 4250 \nz\nM 2034 4750 \nQ 2819 4750 3233 4129 \nQ 3647 3509 3647 2328 \nQ 3647 1150 3233 529 \nQ 2819 -91 2034 -91 \nQ 1250 -91 836 529 \nQ 422 1150 422 2328 \nQ 422 3509 836 4129 \nQ 1250 4750 2034 4750 \nz\n\" id=\"DejaVuSans-30\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-33\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_5\">\n     <g id=\"line2d_5\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"211.28782\" xlink:href=\"#m47deb5a1d2\" y=\"239.758125\"/>\n      </g>\n     </g>\n     <g id=\"text_5\">\n      <!-- 24 -->\n      <g transform=\"translate(204.92532 254.356562)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-34\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_6\">\n     <g id=\"line2d_6\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"249.652984\" xlink:href=\"#m47deb5a1d2\" y=\"239.758125\"/>\n      </g>\n     </g>\n     <g id=\"text_6\">\n      <!-- 18 -->\n      <g transform=\"translate(243.290484 254.356562)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 794 531 \nL 1825 531 \nL 1825 4091 \nL 703 3866 \nL 703 4441 \nL 1819 4666 \nL 2450 4666 \nL 2450 531 \nL 3481 531 \nL 3481 0 \nL 794 0 \nL 794 531 \nz\n\" id=\"DejaVuSans-31\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-38\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_7\">\n     <g id=\"line2d_7\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"288.018148\" xlink:href=\"#m47deb5a1d2\" y=\"239.758125\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 12 -->\n      <g transform=\"translate(281.655648 254.356562)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-32\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_8\">\n     <g id=\"line2d_8\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"326.383313\" xlink:href=\"#m47deb5a1d2\" y=\"239.758125\"/>\n      </g>\n     </g>\n     <g id=\"text_8\">\n      <!-- 6 -->\n      <g transform=\"translate(323.202063 254.356562)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-36\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_9\">\n     <g id=\"line2d_9\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"364.748477\" xlink:href=\"#m47deb5a1d2\" y=\"239.758125\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 0 -->\n      <g transform=\"translate(361.567227 254.356562)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_10\">\n     <!-- Minutes Remaining -->\n     <g transform=\"translate(163.360156 268.034687)scale(0.1 -0.1)\">\n      <defs>\n       <path d=\"M 628 4666 \nL 1569 4666 \nL 2759 1491 \nL 3956 4666 \nL 4897 4666 \nL 4897 0 \nL 4281 0 \nL 4281 4097 \nL 3078 897 \nL 2444 897 \nL 1241 4097 \nL 1241 0 \nL 628 0 \nL 628 4666 \nz\n\" id=\"DejaVuSans-4d\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 603 3500 \nL 1178 3500 \nL 1178 0 \nL 603 0 \nL 603 3500 \nz\nM 603 4863 \nL 1178 4863 \nL 1178 4134 \nL 603 4134 \nL 603 4863 \nz\n\" id=\"DejaVuSans-69\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 3513 2113 \nL 3513 0 \nL 2938 0 \nL 2938 2094 \nQ 2938 2591 2744 2837 \nQ 2550 3084 2163 3084 \nQ 1697 3084 1428 2787 \nQ 1159 2491 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1366 3272 1645 3428 \nQ 1925 3584 2291 3584 \nQ 2894 3584 3203 3211 \nQ 3513 2838 3513 2113 \nz\n\" id=\"DejaVuSans-6e\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 544 1381 \nL 544 3500 \nL 1119 3500 \nL 1119 1403 \nQ 1119 906 1312 657 \nQ 1506 409 1894 409 \nQ 2359 409 2629 706 \nQ 2900 1003 2900 1516 \nL 2900 3500 \nL 3475 3500 \nL 3475 0 \nL 2900 0 \nL 2900 538 \nQ 2691 219 2414 64 \nQ 2138 -91 1772 -91 \nQ 1169 -91 856 284 \nQ 544 659 544 1381 \nz\nM 1991 3584 \nL 1991 3584 \nz\n\" id=\"DejaVuSans-75\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 1172 4494 \nL 1172 3500 \nL 2356 3500 \nL 2356 3053 \nL 1172 3053 \nL 1172 1153 \nQ 1172 725 1289 603 \nQ 1406 481 1766 481 \nL 2356 481 \nL 2356 0 \nL 1766 0 \nQ 1100 0 847 248 \nQ 594 497 594 1153 \nL 594 3053 \nL 172 3053 \nL 172 3500 \nL 594 3500 \nL 594 4494 \nL 1172 4494 \nz\n\" id=\"DejaVuSans-74\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 3597 1894 \nL 3597 1613 \nL 953 1613 \nQ 991 1019 1311 708 \nQ 1631 397 2203 397 \nQ 2534 397 2845 478 \nQ 3156 559 3463 722 \nL 3463 178 \nQ 3153 47 2828 -22 \nQ 2503 -91 2169 -91 \nQ 1331 -91 842 396 \nQ 353 884 353 1716 \nQ 353 2575 817 3079 \nQ 1281 3584 2069 3584 \nQ 2775 3584 3186 3129 \nQ 3597 2675 3597 1894 \nz\nM 3022 2063 \nQ 3016 2534 2758 2815 \nQ 2500 3097 2075 3097 \nQ 1594 3097 1305 2825 \nQ 1016 2553 972 2059 \nL 3022 2063 \nz\n\" id=\"DejaVuSans-65\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 2834 3397 \nL 2834 2853 \nQ 2591 2978 2328 3040 \nQ 2066 3103 1784 3103 \nQ 1356 3103 1142 2972 \nQ 928 2841 928 2578 \nQ 928 2378 1081 2264 \nQ 1234 2150 1697 2047 \nL 1894 2003 \nQ 2506 1872 2764 1633 \nQ 3022 1394 3022 966 \nQ 3022 478 2636 193 \nQ 2250 -91 1575 -91 \nQ 1294 -91 989 -36 \nQ 684 19 347 128 \nL 347 722 \nQ 666 556 975 473 \nQ 1284 391 1588 391 \nQ 1994 391 2212 530 \nQ 2431 669 2431 922 \nQ 2431 1156 2273 1281 \nQ 2116 1406 1581 1522 \nL 1381 1569 \nQ 847 1681 609 1914 \nQ 372 2147 372 2553 \nQ 372 3047 722 3315 \nQ 1072 3584 1716 3584 \nQ 2034 3584 2315 3537 \nQ 2597 3491 2834 3397 \nz\n\" id=\"DejaVuSans-73\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-20\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 2841 2188 \nQ 3044 2119 3236 1894 \nQ 3428 1669 3622 1275 \nL 4263 0 \nL 3584 0 \nL 2988 1197 \nQ 2756 1666 2539 1819 \nQ 2322 1972 1947 1972 \nL 1259 1972 \nL 1259 0 \nL 628 0 \nL 628 4666 \nL 2053 4666 \nQ 2853 4666 3247 4331 \nQ 3641 3997 3641 3322 \nQ 3641 2881 3436 2590 \nQ 3231 2300 2841 2188 \nz\nM 1259 4147 \nL 1259 2491 \nL 2053 2491 \nQ 2509 2491 2742 2702 \nQ 2975 2913 2975 3322 \nQ 2975 3731 2742 3939 \nQ 2509 4147 2053 4147 \nL 1259 4147 \nz\n\" id=\"DejaVuSans-52\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 3328 2828 \nQ 3544 3216 3844 3400 \nQ 4144 3584 4550 3584 \nQ 5097 3584 5394 3201 \nQ 5691 2819 5691 2113 \nL 5691 0 \nL 5113 0 \nL 5113 2094 \nQ 5113 2597 4934 2840 \nQ 4756 3084 4391 3084 \nQ 3944 3084 3684 2787 \nQ 3425 2491 3425 1978 \nL 3425 0 \nL 2847 0 \nL 2847 2094 \nQ 2847 2600 2669 2842 \nQ 2491 3084 2119 3084 \nQ 1678 3084 1418 2786 \nQ 1159 2488 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1356 3278 1631 3431 \nQ 1906 3584 2284 3584 \nQ 2666 3584 2933 3390 \nQ 3200 3197 3328 2828 \nz\n\" id=\"DejaVuSans-6d\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 2194 1759 \nQ 1497 1759 1228 1600 \nQ 959 1441 959 1056 \nQ 959 750 1161 570 \nQ 1363 391 1709 391 \nQ 2188 391 2477 730 \nQ 2766 1069 2766 1631 \nL 2766 1759 \nL 2194 1759 \nz\nM 3341 1997 \nL 3341 0 \nL 2766 0 \nL 2766 531 \nQ 2569 213 2275 61 \nQ 1981 -91 1556 -91 \nQ 1019 -91 701 211 \nQ 384 513 384 1019 \nQ 384 1609 779 1909 \nQ 1175 2209 1959 2209 \nL 2766 2209 \nL 2766 2266 \nQ 2766 2663 2505 2880 \nQ 2244 3097 1772 3097 \nQ 1472 3097 1187 3025 \nQ 903 2953 641 2809 \nL 641 3341 \nQ 956 3463 1253 3523 \nQ 1550 3584 1831 3584 \nQ 2591 3584 2966 3190 \nQ 3341 2797 3341 1997 \nz\n\" id=\"DejaVuSans-61\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 2906 1791 \nQ 2906 2416 2648 2759 \nQ 2391 3103 1925 3103 \nQ 1463 3103 1205 2759 \nQ 947 2416 947 1791 \nQ 947 1169 1205 825 \nQ 1463 481 1925 481 \nQ 2391 481 2648 825 \nQ 2906 1169 2906 1791 \nz\nM 3481 434 \nQ 3481 -459 3084 -895 \nQ 2688 -1331 1869 -1331 \nQ 1566 -1331 1297 -1286 \nQ 1028 -1241 775 -1147 \nL 775 -588 \nQ 1028 -725 1275 -790 \nQ 1522 -856 1778 -856 \nQ 2344 -856 2625 -561 \nQ 2906 -266 2906 331 \nL 2906 616 \nQ 2728 306 2450 153 \nQ 2172 0 1784 0 \nQ 1141 0 747 490 \nQ 353 981 353 1791 \nQ 353 2603 747 3093 \nQ 1141 3584 1784 3584 \nQ 2172 3584 2450 3431 \nQ 2728 3278 2906 2969 \nL 2906 3500 \nL 3481 3500 \nL 3481 434 \nz\n\" id=\"DejaVuSans-67\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-4d\"/>\n      <use x=\"86.279297\" xlink:href=\"#DejaVuSans-69\"/>\n      <use x=\"114.0625\" xlink:href=\"#DejaVuSans-6e\"/>\n      <use x=\"177.441406\" xlink:href=\"#DejaVuSans-75\"/>\n      <use x=\"240.820312\" xlink:href=\"#DejaVuSans-74\"/>\n      <use x=\"280.029297\" xlink:href=\"#DejaVuSans-65\"/>\n      <use x=\"341.552734\" xlink:href=\"#DejaVuSans-73\"/>\n      <use x=\"393.652344\" xlink:href=\"#DejaVuSans-20\"/>\n      <use x=\"425.439453\" xlink:href=\"#DejaVuSans-52\"/>\n      <use x=\"490.421875\" xlink:href=\"#DejaVuSans-65\"/>\n      <use x=\"551.945312\" xlink:href=\"#DejaVuSans-6d\"/>\n      <use x=\"649.357422\" xlink:href=\"#DejaVuSans-61\"/>\n      <use x=\"710.636719\" xlink:href=\"#DejaVuSans-69\"/>\n      <use x=\"738.419922\" xlink:href=\"#DejaVuSans-6e\"/>\n      <use x=\"801.798828\" xlink:href=\"#DejaVuSans-69\"/>\n      <use x=\"829.582031\" xlink:href=\"#DejaVuSans-6e\"/>\n      <use x=\"892.960938\" xlink:href=\"#DejaVuSans-67\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_10\">\n      <defs>\n       <path d=\"M 0 0 \nL -3.5 0 \n\" id=\"mcaa54d736b\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#mcaa54d736b\" y=\"239.758125\"/>\n      </g>\n     </g>\n     <g id=\"text_11\">\n      <!-- 0.0 -->\n      <g transform=\"translate(20.878125 243.557344)scale(0.1 -0.1)\">\n       <defs>\n        <path d=\"M 684 794 \nL 1344 794 \nL 1344 0 \nL 684 0 \nL 684 794 \nz\n\" id=\"DejaVuSans-2e\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_11\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#mcaa54d736b\" y=\"196.270125\"/>\n      </g>\n     </g>\n     <g id=\"text_12\">\n      <!-- 0.2 -->\n      <g transform=\"translate(20.878125 200.069344)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-32\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_12\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#mcaa54d736b\" y=\"152.782125\"/>\n      </g>\n     </g>\n     <g id=\"text_13\">\n      <!-- 0.4 -->\n      <g transform=\"translate(20.878125 156.581344)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-34\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_13\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#mcaa54d736b\" y=\"109.294125\"/>\n      </g>\n     </g>\n     <g id=\"text_14\">\n      <!-- 0.6 -->\n      <g transform=\"translate(20.878125 113.093344)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-36\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_5\">\n     <g id=\"line2d_14\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#mcaa54d736b\" y=\"65.806125\"/>\n      </g>\n     </g>\n     <g id=\"text_15\">\n      <!-- 0.8 -->\n      <g transform=\"translate(20.878125 69.605344)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-38\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_6\">\n     <g id=\"line2d_15\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"43.78125\" xlink:href=\"#mcaa54d736b\" y=\"22.318125\"/>\n      </g>\n     </g>\n     <g id=\"text_16\">\n      <!-- 1.0 -->\n      <g transform=\"translate(20.878125 26.117344)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-2e\"/>\n       <use x=\"95.410156\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_17\">\n     <!-- Home Win Probability -->\n     <g transform=\"translate(14.798438 184.800625)rotate(-90)scale(0.1 -0.1)\">\n      <defs>\n       <path d=\"M 628 4666 \nL 1259 4666 \nL 1259 2753 \nL 3553 2753 \nL 3553 4666 \nL 4184 4666 \nL 4184 0 \nL 3553 0 \nL 3553 2222 \nL 1259 2222 \nL 1259 0 \nL 628 0 \nL 628 4666 \nz\n\" id=\"DejaVuSans-48\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 1959 3097 \nQ 1497 3097 1228 2736 \nQ 959 2375 959 1747 \nQ 959 1119 1226 758 \nQ 1494 397 1959 397 \nQ 2419 397 2687 759 \nQ 2956 1122 2956 1747 \nQ 2956 2369 2687 2733 \nQ 2419 3097 1959 3097 \nz\nM 1959 3584 \nQ 2709 3584 3137 3096 \nQ 3566 2609 3566 1747 \nQ 3566 888 3137 398 \nQ 2709 -91 1959 -91 \nQ 1206 -91 779 398 \nQ 353 888 353 1747 \nQ 353 2609 779 3096 \nQ 1206 3584 1959 3584 \nz\n\" id=\"DejaVuSans-6f\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 213 4666 \nL 850 4666 \nL 1831 722 \nL 2809 4666 \nL 3519 4666 \nL 4500 722 \nL 5478 4666 \nL 6119 4666 \nL 4947 0 \nL 4153 0 \nL 3169 4050 \nL 2175 0 \nL 1381 0 \nL 213 4666 \nz\n\" id=\"DejaVuSans-57\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 1259 4147 \nL 1259 2394 \nL 2053 2394 \nQ 2494 2394 2734 2622 \nQ 2975 2850 2975 3272 \nQ 2975 3691 2734 3919 \nQ 2494 4147 2053 4147 \nL 1259 4147 \nz\nM 628 4666 \nL 2053 4666 \nQ 2838 4666 3239 4311 \nQ 3641 3956 3641 3272 \nQ 3641 2581 3239 2228 \nQ 2838 1875 2053 1875 \nL 1259 1875 \nL 1259 0 \nL 628 0 \nL 628 4666 \nz\n\" id=\"DejaVuSans-50\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 2631 2963 \nQ 2534 3019 2420 3045 \nQ 2306 3072 2169 3072 \nQ 1681 3072 1420 2755 \nQ 1159 2438 1159 1844 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1341 3275 1631 3429 \nQ 1922 3584 2338 3584 \nQ 2397 3584 2469 3576 \nQ 2541 3569 2628 3553 \nL 2631 2963 \nz\n\" id=\"DejaVuSans-72\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 3116 1747 \nQ 3116 2381 2855 2742 \nQ 2594 3103 2138 3103 \nQ 1681 3103 1420 2742 \nQ 1159 2381 1159 1747 \nQ 1159 1113 1420 752 \nQ 1681 391 2138 391 \nQ 2594 391 2855 752 \nQ 3116 1113 3116 1747 \nz\nM 1159 2969 \nQ 1341 3281 1617 3432 \nQ 1894 3584 2278 3584 \nQ 2916 3584 3314 3078 \nQ 3713 2572 3713 1747 \nQ 3713 922 3314 415 \nQ 2916 -91 2278 -91 \nQ 1894 -91 1617 61 \nQ 1341 213 1159 525 \nL 1159 0 \nL 581 0 \nL 581 4863 \nL 1159 4863 \nL 1159 2969 \nz\n\" id=\"DejaVuSans-62\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 603 4863 \nL 1178 4863 \nL 1178 0 \nL 603 0 \nL 603 4863 \nz\n\" id=\"DejaVuSans-6c\" transform=\"scale(0.015625)\"/>\n       <path d=\"M 2059 -325 \nQ 1816 -950 1584 -1140 \nQ 1353 -1331 966 -1331 \nL 506 -1331 \nL 506 -850 \nL 844 -850 \nQ 1081 -850 1212 -737 \nQ 1344 -625 1503 -206 \nL 1606 56 \nL 191 3500 \nL 800 3500 \nL 1894 763 \nL 2988 3500 \nL 3597 3500 \nL 2059 -325 \nz\n\" id=\"DejaVuSans-79\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-48\"/>\n      <use x=\"75.195312\" xlink:href=\"#DejaVuSans-6f\"/>\n      <use x=\"136.376953\" xlink:href=\"#DejaVuSans-6d\"/>\n      <use x=\"233.789062\" xlink:href=\"#DejaVuSans-65\"/>\n      <use x=\"295.3125\" xlink:href=\"#DejaVuSans-20\"/>\n      <use x=\"327.099609\" xlink:href=\"#DejaVuSans-57\"/>\n      <use x=\"423.726562\" xlink:href=\"#DejaVuSans-69\"/>\n      <use x=\"451.509766\" xlink:href=\"#DejaVuSans-6e\"/>\n      <use x=\"514.888672\" xlink:href=\"#DejaVuSans-20\"/>\n      <use x=\"546.675781\" xlink:href=\"#DejaVuSans-50\"/>\n      <use x=\"605.228516\" xlink:href=\"#DejaVuSans-72\"/>\n      <use x=\"644.091797\" xlink:href=\"#DejaVuSans-6f\"/>\n      <use x=\"705.273438\" xlink:href=\"#DejaVuSans-62\"/>\n      <use x=\"768.75\" xlink:href=\"#DejaVuSans-61\"/>\n      <use x=\"830.029297\" xlink:href=\"#DejaVuSans-62\"/>\n      <use x=\"893.505859\" xlink:href=\"#DejaVuSans-69\"/>\n      <use x=\"921.289062\" xlink:href=\"#DejaVuSans-6c\"/>\n      <use x=\"949.072266\" xlink:href=\"#DejaVuSans-69\"/>\n      <use x=\"976.855469\" xlink:href=\"#DejaVuSans-74\"/>\n      <use x=\"1016.064453\" xlink:href=\"#DejaVuSans-79\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"line2d_16\">\n    <path clip-path=\"url(#pf41caffd8a)\" d=\"M 363.363068 23.348998 \nL 362.297369 23.389245 \nL 359.846261 23.360069 \nL 359.419982 22.933063 \nL 349.508981 22.854714 \nL 348.976132 22.696534 \nL 347.697293 22.579775 \nL 340.34397 22.838551 \nL 337.360012 22.997099 \nL 335.441754 23.046469 \nL 334.376055 23.278746 \nL 333.310356 24.316204 \nL 332.031517 24.316204 \nL 330.219829 24.786639 \nL 328.514711 24.078525 \nL 326.916162 24.148939 \nL 326.703022 23.785064 \nL 325.530753 23.858511 \nL 324.465054 24.52266 \nL 322.866506 23.747871 \nL 321.054818 23.692129 \nL 319.456269 24.299609 \nL 317.751151 24.299609 \nL 316.152602 24.73181 \nL 313.168645 24.882926 \nL 312.635795 23.958296 \nL 311.996376 23.976673 \nL 308.905849 23.992115 \nL 307.52044 24.090038 \nL 306.135032 24.50214 \nL 305.921892 24.395485 \nL 304.536483 24.50014 \nL 303.470784 26.254487 \nL 302.405085 25.985199 \nL 301.339386 25.985199 \nL 299.740837 25.55514 \nL 299.634268 26.084506 \nL 297.3963 26.084506 \nL 297.18316 26.205923 \nL 296.54374 26.205923 \nL 295.797751 28.252023 \nL 293.772923 28.212543 \nL 293.559783 28.824844 \nL 292.920364 28.944859 \nL 290.895536 29.31181 \nL 289.403557 28.816628 \nL 287.911578 29.312791 \nL 286.20646 32.091367 \nL 285.034191 30.868005 \nL 284.181632 31.329421 \nL 283.222503 30.883333 \nL 283.115933 32.399167 \nL 282.902793 33.097526 \nL 282.156804 32.051226 \nL 281.837094 32.051226 \nL 280.984535 31.814917 \nL 280.345116 33.149273 \nL 279.705696 35.147246 \nL 279.492556 35.147246 \nL 278.639997 36.791853 \nL 278.426857 36.791853 \nL 276.934879 37.108711 \nL 275.65604 29.339943 \nL 275.016621 28.322978 \nL 273.524642 27.341692 \nL 272.139233 27.274033 \nL 271.606384 28.996011 \nL 271.286674 33.387704 \nL 269.474986 33.387704 \nL 267.343588 31.756604 \nL 267.130448 33.123286 \nL 266.704168 38.644913 \nL 266.491028 38.644913 \nL 265.21219 37.480374 \nL 264.57277 37.658495 \nL 264.35963 37.926112 \nL 261.908523 33.924588 \nL 259.137705 33.924588 \nL 257.752297 37.386041 \nL 256.793167 35.665934 \nL 256.366888 35.665934 \nL 254.44863 33.998784 \nL 253.80921 30.715715 \nL 252.530371 30.715715 \nL 252.210662 30.240056 \nL 251.997522 30.479048 \nL 250.079264 30.718765 \nL 249.013565 30.703966 \nL 248.054436 28.123956 \nL 246.562457 32.170436 \nL 246.242747 30.471082 \nL 245.923038 30.471082 \nL 245.390188 30.867702 \nL 243.89821 31.451915 \nL 243.04565 27.960777 \nL 239.955123 29.572798 \nL 238.036865 33.562709 \nL 237.504015 29.943836 \nL 237.290876 29.943836 \nL 236.438316 29.576806 \nL 236.118607 28.685509 \nL 235.905467 28.685509 \nL 233.987209 29.392609 \nL 233.560929 28.629498 \nL 232.28209 28.629498 \nL 232.068951 29.845933 \nL 229.830983 34.220565 \nL 227.806155 31.86537 \nL 227.166735 31.86537 \nL 225.994466 33.77944 \nL 225.141907 33.77944 \nL 223.863068 34.514205 \nL 222.797369 30.456323 \nL 221.092251 30.940506 \nL 220.879111 30.637749 \nL 220.452831 29.824182 \nL 220.239692 29.824182 \nL 216.722885 30.669323 \nL 215.017766 34.734708 \nL 213.845498 30.903936 \nL 211.28782 32.654956 \nL 210.96811 34.070985 \nL 210.328691 30.888656 \nL 208.197293 33.434515 \nL 207.025024 32.511789 \nL 206.279035 33.790811 \nL 205.319905 33.849301 \nL 203.934497 38.118787 \nL 202.016239 41.519457 \nL 200.63083 38.497653 \nL 199.245421 40.220513 \nL 199.138851 42.603493 \nL 197.327163 42.757986 \nL 196.900883 40.037304 \nL 196.687744 40.037304 \nL 196.261464 40.549993 \nL 195.195765 40.549993 \nL 194.982625 38.815968 \nL 194.130066 38.815968 \nL 192.638087 41.403939 \nL 192.211808 44.860654 \nL 189.65413 45.322854 \nL 187.949012 55.36208 \nL 187.735872 55.36208 \nL 186.457033 54.743596 \nL 184.965054 60.174492 \nL 183.259936 64.897668 \nL 182.407377 53.495765 \nL 180.915398 48.433628 \nL 180.062839 51.866509 \nL 179.31685 46.906563 \nL 178.89057 46.906563 \nL 177.718301 42.376402 \nL 175.693473 42.376402 \nL 174.414634 49.631169 \nL 173.029226 47.856727 \nL 171.537247 51.227277 \nL 169.832129 42.280739 \nL 169.086139 42.280739 \nL 168.55329 41.937223 \nL 167.487591 41.937223 \nL 166.102182 43.854828 \nL 165.356193 51.505644 \nL 165.143053 51.505644 \nL 163.544504 52.623447 \nL 161.626246 57.197405 \nL 160.240837 49.871744 \nL 159.921128 56.416088 \nL 156.937171 61.684 \nL 156.724031 62.627604 \nL 155.871472 68.082839 \nL 154.379493 64.976555 \nL 152.567805 70.9978 \nL 152.354665 70.9978 \nL 151.502106 69.474086 \nL 150.010127 69.568339 \nL 148.091869 67.318138 \nL 146.173611 76.92526 \nL 144.255352 67.77792 \nL 143.509363 83.762359 \nL 143.296223 84.031283 \nL 142.763374 84.031283 \nL 141.377965 81.853269 \nL 141.164825 81.853269 \nL 139.459707 81.142015 \nL 138.074298 87.380241 \nL 136.795459 84.31699 \nL 135.83633 87.041924 \nL 135.72976 88.202952 \nL 134.557491 88.202952 \nL 134.237782 106.747988 \nL 132.319523 106.747988 \nL 130.934115 104.678531 \nL 129.228996 104.59547 \nL 127.843588 124.042936 \nL 127.630448 124.042936 \nL 126.884459 121.346828 \nL 124.753061 124.015161 \nL 123.580792 96.17788 \nL 122.728232 103.049105 \nL 121.342824 89.393698 \nL 121.129684 91.151884 \nL 118.998286 93.079562 \nL 117.826017 93.079562 \nL 116.440608 93.808783 \nL 116.120899 84.134731 \nL 115.268339 84.134731 \nL 114.73549 85.064975 \nL 114.09607 85.064975 \nL 113.776361 88.269856 \nL 112.604092 88.269856 \nL 111.325253 97.775647 \nL 109.833274 84.372716 \nL 109.620135 84.372716 \nL 108.128156 102.488251 \nL 107.062457 106.862211 \nL 105.890188 105.812565 \nL 104.611349 90.425324 \nL 104.18507 90.425324 \nL 103.65222 90.832284 \nL 101.733962 87.332623 \nL 101.520822 87.332623 \nL 100.668263 90.0948 \nL 100.455123 90.0948 \nL 99.815704 96.577838 \nL 97.364596 96.173086 \nL 95.020058 102.136128 \nL 94.593779 102.136128 \nL 92.67552 101.874916 \nL 90.437553 101.236707 \nL 88.945574 101.236707 \nL 88.625864 103.065507 \nL 87.453595 103.065507 \nL 86.068187 102.760328 \nL 84.256498 102.760328 \nL 82.55138 104.741865 \nL 81.805391 94.645937 \nL 81.592251 94.645937 \nL 80.206842 121.271991 \nL 79.141143 121.271991 \nL 78.395154 120.227286 \nL 77.436025 103.78031 \nL 75.091487 103.78031 \nL 73.706078 105.78802 \nL 73.066659 90.575127 \nL 72.427239 90.575127 \nL 71.041831 93.943429 \nL 69.656422 76.372834 \nL 69.336712 68.940469 \nL 69.123572 79.084997 \nL 68.164443 95.450529 \nL 68.057873 114.384242 \nL 65.819905 107.233274 \nL 63.688507 107.233274 \nL 63.581938 107.554125 \nL 62.516239 107.554125 \nL 62.303099 107.921626 \nL 61.02426 107.666596 \nL 59.532281 107.049496 \nL 58.999432 107.049496 \nL 58.999432 107.049496 \n\" style=\"fill:none;stroke:#1f77b4;stroke-linecap:square;stroke-width:1.5;\"/>\n   </g>\n   <g id=\"patch_3\">\n    <path d=\"M 43.78125 239.758125 \nL 43.78125 22.318125 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path d=\"M 378.58125 239.758125 \nL 378.58125 22.318125 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path d=\"M 43.78125 239.758125 \nL 378.58125 239.758125 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_6\">\n    <path d=\"M 43.78125 22.318125 \nL 378.58125 22.318125 \n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"text_18\">\n    <!-- 0 -->\n    <g transform=\"translate(58.999432 218.014125)scale(0.1 -0.1)\">\n     <use xlink:href=\"#DejaVuSans-30\"/>\n    </g>\n   </g>\n   <g id=\"text_19\">\n    <!-- -6 -->\n    <g transform=\"translate(81.592251 218.014125)scale(0.1 -0.1)\">\n     <defs>\n      <path d=\"M 313 2009 \nL 1997 2009 \nL 1997 1497 \nL 313 1497 \nL 313 2009 \nz\n\" id=\"DejaVuSans-2d\" transform=\"scale(0.015625)\"/>\n     </defs>\n     <use xlink:href=\"#DejaVuSans-2d\"/>\n     <use x=\"36.083984\" xlink:href=\"#DejaVuSans-36\"/>\n    </g>\n   </g>\n   <g id=\"text_20\">\n    <!-- 2 -->\n    <g transform=\"translate(115.481479 218.014125)scale(0.1 -0.1)\">\n     <use xlink:href=\"#DejaVuSans-32\"/>\n    </g>\n   </g>\n   <g id=\"text_21\">\n    <!-- 3 -->\n    <g transform=\"translate(141.377965 218.014125)scale(0.1 -0.1)\">\n     <use xlink:href=\"#DejaVuSans-33\"/>\n    </g>\n   </g>\n   <g id=\"text_22\">\n    <!-- 16 -->\n    <g transform=\"translate(175.693473 218.014125)scale(0.1 -0.1)\">\n     <use xlink:href=\"#DejaVuSans-31\"/>\n     <use x=\"63.623047\" xlink:href=\"#DejaVuSans-36\"/>\n    </g>\n   </g>\n   <g id=\"text_23\">\n    <!-- 22 -->\n    <g transform=\"translate(202.016239 218.014125)scale(0.1 -0.1)\">\n     <use xlink:href=\"#DejaVuSans-32\"/>\n     <use x=\"63.623047\" xlink:href=\"#DejaVuSans-32\"/>\n    </g>\n   </g>\n   <g id=\"text_24\">\n    <!-- 26 -->\n    <g transform=\"translate(232.068951 218.014125)scale(0.1 -0.1)\">\n     <use xlink:href=\"#DejaVuSans-32\"/>\n     <use x=\"63.623047\" xlink:href=\"#DejaVuSans-36\"/>\n    </g>\n   </g>\n   <g id=\"text_25\">\n    <!-- 16 -->\n    <g transform=\"translate(256.580028 218.014125)scale(0.1 -0.1)\">\n     <use xlink:href=\"#DejaVuSans-31\"/>\n     <use x=\"63.623047\" xlink:href=\"#DejaVuSans-36\"/>\n    </g>\n   </g>\n   <g id=\"text_26\">\n    <!-- 22 -->\n    <g transform=\"translate(280.984535 218.014125)scale(0.1 -0.1)\">\n     <use xlink:href=\"#DejaVuSans-32\"/>\n     <use x=\"63.623047\" xlink:href=\"#DejaVuSans-32\"/>\n    </g>\n   </g>\n   <g id=\"text_27\">\n    <!-- 20 -->\n    <g transform=\"translate(305.921892 218.014125)scale(0.1 -0.1)\">\n     <use xlink:href=\"#DejaVuSans-32\"/>\n     <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n    </g>\n   </g>\n   <g id=\"text_28\">\n    <!-- 22 -->\n    <g transform=\"translate(334.376055 218.014125)scale(0.1 -0.1)\">\n     <use xlink:href=\"#DejaVuSans-32\"/>\n     <use x=\"63.623047\" xlink:href=\"#DejaVuSans-32\"/>\n    </g>\n   </g>\n   <g id=\"text_29\">\n    <!-- 19 -->\n    <g transform=\"translate(362.723649 218.014125)scale(0.1 -0.1)\">\n     <defs>\n      <path d=\"M 703 97 \nL 703 672 \nQ 941 559 1184 500 \nQ 1428 441 1663 441 \nQ 2288 441 2617 861 \nQ 2947 1281 2994 2138 \nQ 2813 1869 2534 1725 \nQ 2256 1581 1919 1581 \nQ 1219 1581 811 2004 \nQ 403 2428 403 3163 \nQ 403 3881 828 4315 \nQ 1253 4750 1959 4750 \nQ 2769 4750 3195 4129 \nQ 3622 3509 3622 2328 \nQ 3622 1225 3098 567 \nQ 2575 -91 1691 -91 \nQ 1453 -91 1209 -44 \nQ 966 3 703 97 \nz\nM 1959 2075 \nQ 2384 2075 2632 2365 \nQ 2881 2656 2881 3163 \nQ 2881 3666 2632 3958 \nQ 2384 4250 1959 4250 \nQ 1534 4250 1286 3958 \nQ 1038 3666 1038 3163 \nQ 1038 2656 1286 2365 \nQ 1534 2075 1959 2075 \nz\n\" id=\"DejaVuSans-39\" transform=\"scale(0.015625)\"/>\n     </defs>\n     <use xlink:href=\"#DejaVuSans-31\"/>\n     <use x=\"63.623047\" xlink:href=\"#DejaVuSans-39\"/>\n    </g>\n   </g>\n   <g id=\"text_30\">\n    <!-- Very Ugly Win Probability Chart -->\n    <g transform=\"translate(117.316875 16.318125)scale(0.12 -0.12)\">\n     <defs>\n      <path d=\"M 1831 0 \nL 50 4666 \nL 709 4666 \nL 2188 738 \nL 3669 4666 \nL 4325 4666 \nL 2547 0 \nL 1831 0 \nz\n\" id=\"DejaVuSans-56\" transform=\"scale(0.015625)\"/>\n      <path d=\"M 556 4666 \nL 1191 4666 \nL 1191 1831 \nQ 1191 1081 1462 751 \nQ 1734 422 2344 422 \nQ 2950 422 3222 751 \nQ 3494 1081 3494 1831 \nL 3494 4666 \nL 4128 4666 \nL 4128 1753 \nQ 4128 841 3676 375 \nQ 3225 -91 2344 -91 \nQ 1459 -91 1007 375 \nQ 556 841 556 1753 \nL 556 4666 \nz\n\" id=\"DejaVuSans-55\" transform=\"scale(0.015625)\"/>\n      <path d=\"M 4122 4306 \nL 4122 3641 \nQ 3803 3938 3442 4084 \nQ 3081 4231 2675 4231 \nQ 1875 4231 1450 3742 \nQ 1025 3253 1025 2328 \nQ 1025 1406 1450 917 \nQ 1875 428 2675 428 \nQ 3081 428 3442 575 \nQ 3803 722 4122 1019 \nL 4122 359 \nQ 3791 134 3420 21 \nQ 3050 -91 2638 -91 \nQ 1578 -91 968 557 \nQ 359 1206 359 2328 \nQ 359 3453 968 4101 \nQ 1578 4750 2638 4750 \nQ 3056 4750 3426 4639 \nQ 3797 4528 4122 4306 \nz\n\" id=\"DejaVuSans-43\" transform=\"scale(0.015625)\"/>\n      <path d=\"M 3513 2113 \nL 3513 0 \nL 2938 0 \nL 2938 2094 \nQ 2938 2591 2744 2837 \nQ 2550 3084 2163 3084 \nQ 1697 3084 1428 2787 \nQ 1159 2491 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 4863 \nL 1159 4863 \nL 1159 2956 \nQ 1366 3272 1645 3428 \nQ 1925 3584 2291 3584 \nQ 2894 3584 3203 3211 \nQ 3513 2838 3513 2113 \nz\n\" id=\"DejaVuSans-68\" transform=\"scale(0.015625)\"/>\n     </defs>\n     <use xlink:href=\"#DejaVuSans-56\"/>\n     <use x=\"60.658203\" xlink:href=\"#DejaVuSans-65\"/>\n     <use x=\"122.181641\" xlink:href=\"#DejaVuSans-72\"/>\n     <use x=\"163.294922\" xlink:href=\"#DejaVuSans-79\"/>\n     <use x=\"222.474609\" xlink:href=\"#DejaVuSans-20\"/>\n     <use x=\"254.261719\" xlink:href=\"#DejaVuSans-55\"/>\n     <use x=\"327.455078\" xlink:href=\"#DejaVuSans-67\"/>\n     <use x=\"390.931641\" xlink:href=\"#DejaVuSans-6c\"/>\n     <use x=\"418.714844\" xlink:href=\"#DejaVuSans-79\"/>\n     <use x=\"477.894531\" xlink:href=\"#DejaVuSans-20\"/>\n     <use x=\"509.681641\" xlink:href=\"#DejaVuSans-57\"/>\n     <use x=\"606.308594\" xlink:href=\"#DejaVuSans-69\"/>\n     <use x=\"634.091797\" xlink:href=\"#DejaVuSans-6e\"/>\n     <use x=\"697.470703\" xlink:href=\"#DejaVuSans-20\"/>\n     <use x=\"729.257812\" xlink:href=\"#DejaVuSans-50\"/>\n     <use x=\"787.810547\" xlink:href=\"#DejaVuSans-72\"/>\n     <use x=\"826.673828\" xlink:href=\"#DejaVuSans-6f\"/>\n     <use x=\"887.855469\" xlink:href=\"#DejaVuSans-62\"/>\n     <use x=\"951.332031\" xlink:href=\"#DejaVuSans-61\"/>\n     <use x=\"1012.611328\" xlink:href=\"#DejaVuSans-62\"/>\n     <use x=\"1076.087891\" xlink:href=\"#DejaVuSans-69\"/>\n     <use x=\"1103.871094\" xlink:href=\"#DejaVuSans-6c\"/>\n     <use x=\"1131.654297\" xlink:href=\"#DejaVuSans-69\"/>\n     <use x=\"1159.4375\" xlink:href=\"#DejaVuSans-74\"/>\n     <use x=\"1198.646484\" xlink:href=\"#DejaVuSans-79\"/>\n     <use x=\"1257.826172\" xlink:href=\"#DejaVuSans-20\"/>\n     <use x=\"1289.613281\" xlink:href=\"#DejaVuSans-43\"/>\n     <use x=\"1359.4375\" xlink:href=\"#DejaVuSans-68\"/>\n     <use x=\"1422.816406\" xlink:href=\"#DejaVuSans-61\"/>\n     <use x=\"1484.095703\" xlink:href=\"#DejaVuSans-72\"/>\n     <use x=\"1525.208984\" xlink:href=\"#DejaVuSans-74\"/>\n    </g>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"pf41caffd8a\">\n   <rect height=\"217.44\" width=\"334.8\" x=\"43.78125\" y=\"22.318125\"/>\n  </clipPath>\n </defs>\n</svg>\n",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     }
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "test['home_win_prob'] = test_predictions\n",
    "random_game = test['idGame'].values[0]\n",
    "plot_data = test.loc[test[\"idGame\"] == random_game]\n",
    "plot_data['minutes_remaining'] = plot_data['time_remaining']/60\n",
    "label_frame = plot_data.iloc[np.arange(0, len(plot_data), 40)]\n",
    "label_frame = label_frame[['home_margin', 'minutes_remaining']]\n",
    "\n",
    "## I have no real idea what I'm doing here\n",
    "plot = sns.lineplot(x=plot_data['minutes_remaining'], \n",
    "                    y=plot_data['home_win_prob'])\n",
    "plot.invert_xaxis()\n",
    "plot.set(ylim=(0, 1))\n",
    "plot.set_xticks([48, 42, 36, 30, 24, 18, 12, 6, 0])\n",
    "plot.set_title(\"Very Ugly Win Probability Chart\")\n",
    "plot.set_ylabel(\"Home Win Probability\")\n",
    "plot.set_xlabel(\"Minutes Remaining\")\n",
    "for idx in range(len(label_frame)):\n",
    "    plot.annotate(f\"{int(label_frame['home_margin'].values[idx])}\", xy=(label_frame['minutes_remaining'].values[idx], 0.1))\n",
    "plt.show()"
   ]
  },
  {
   "source": [
    "\n",
    "There you go. Statistical and ML approaches to making a win probability model. Couple things to consider 1) our model doesn't include *any* sample weighting, and you should think about the best ways to implement that 2) this is not a best practices article on model building. We didn't look at calibration, errors by quarter, score, etc. Lots of things to improve on, but this is a super bare bones starting point. Good luck.\n",
    "\n",
    "Side note, based on ye olde eyeball test, this model appears far better calibrated than the one we did in R. I'm skeptical of my tuning in R in that case maybe?"
   ],
   "cell_type": "markdown",
   "metadata": {}
  }
 ]
}